
EE422C Project 3 (Word Ladder) Test Plan

Samuel Patterson svp395
Alejandro Stevenson-Duran as72948
<Student Name> <Student EID>
Fall 2016
Test plan summary

For BFS testing, we did not use jUnit. Instead we wrote our own test initializations that main 
would call, and tested individual methods at a time to ensure they worked individually before 
connecting them all. After all methods passed their own tests, they were combined to 'complete 
the picture'. We covered as many cases as we could think of, and our solution passed them all.

For DFS testing, we


/* BFS */

1.
a) findFriends method test
b) Checks for words only one letter away from given start word. Adds them to queue
and removes them from dictonary.
c) create a dictionary of words with one letter difference.
d) all created nodes should have valid parent and be removed from dictionary
e) proper creation and placement/removal of nodes.
f) quick test, < 1 second

2.
a) getList method test
b) checks construction of list from end word to start word (construction of ladder)
c) create a valid linked list of nodes from end word to start
d) correct ladder
e) invalid ladder
f) passed all

3.
a) isNeighbor method test
b) checks that only valid words are counted as neighbor (ie one letter away from start word)
c) create a list of what should be neighbors and what should not be
d) 'true' returned for valid neighbors
e) passes if only real neighbors return true
f) passed all

4.
a) time test
b) ensures that wordLadderBFS returns ladder in appropriate time
c) list of various 5 letter start and end words 
d) valid ladder in appropriate time
e) fails if it takes longer than 5 seconds
f) passed all

5.
a) length test
b) ensures that wordLadderBFS returns the shortest possible ladder
c) list of various 5 letter start and end words
d) valid ladder with minimal rungs
e) fails if shorter ladder is possible
f) none


/* DFS */

1.
a) myDictionary check
b) ensures create_myDictionary returns the correst arraylist without going outofbounds
c) the 5-letter dictionary provided to us
d) a reference to my newly created dictionary
e) fails if size of my dictionary != size of original dictionary
f) passed

2.
a) word_checker
b) tests if boolean output is correct
c) provide 2 valid strings
d) true, if the words differ by one letter, false otherwise
e) check boolean values given different pairs of words
f) passed

3.
a) check dfs recursion
b) checks if getdfsladder has an endless recursive loop
c) provide different cases such as very short/long ladders
d) succesfull program termination
e) program termination
f) passed

4.
a) DFS visited nodes
b) class newDict which initializes each node to visited=false
c) provide different cases such as very short/long ladders
d) visited nodes given in each recursive stage
e) all nodes with correct boolean value of visited
f) passed

5.
a) dfs performance
b) tests the dfs time perforamnce
c) feed very large dictionary and two random words
d) a correct ladder
e) a correct ladder within a 5 second lapse for all cases
f) passed for all tested words

